var scssHandler = {
  srcDir: "./src/resources/scss/",
  desDir: "./src/public/css/",
  // Compile a single scss file into css

  compileSass: (file) => {
    const inputFilePath = path.join(this.srcDir, file);
    const outputFilePath = path.join(this.desDir, path.basename(file, '.scss') + '.css')
    const option = {file: inputFilePath }
    sass.render(option, (err, result) => {
      if (err) throw err;
      fs.writeFile(outputFilePath, result.css, (err) => {
        if (err) throw err;
        console.log(`Compiled ${inputFilePath} to ${outputFilePath} success`);
      });
    });
  },

  // Watch for changes in scss files (C-B)
  watchForChange_callback: (event, fileName) => {
    if (path.extname(fileName) !== '.scss' || fileName[0] == '_') return;

    console.log(`${event.toUpperCase()}: ${fileName}`);
  
    scssHandler.compileSass(fileName);
  },

  // Process scss files from directory (C-B)
  readDir_callback: (err, files) => {
    if (err) throw err;

    files.forEach(file => {
      // Not need rendering when contains file that is not scss or static file like _filename.scss
      if (path.extname(file) !== '.scss' || file[0] == '_') return;
      scssHandler.compileSass(file);
    });
  },

  init: () => {
    // Watch for changes in source directory (F-R)
    fs.watch(scssHandler.srcDir, (event, file) => {
      console.log(file);
      scssHandler.watchForChange_callback(event, file);
    });
    // Compile all scss files initially (F-R)
    fs.readdir(scssHandler.srcDir, (err, files) => {
      scssHandler.readDir_callback(err, files);
    });
  }
}

// Use scssHandler
scssHandler.init();


const srcDir = "./src/resources/scss/";
const desDir = "./src/public/css/";
// Compile a single scss file into css
function compileSass(file) {
  const inputFilePath = path.join(srcDir, file);
  const outputFilePath = path.join(desDir, path.basename(file, '.scss') + '.css')
  const option = {file: inputFilePath }
  sass.render(option, (err, result) => {
    if (err) throw err;
    fs.writeFile(outputFilePath, result.css, (err) => {
      if (err) throw err;
      console.log(`Compiled ${inputFilePath} to ${outputFilePath} success`);
    });
  });
}

// Watch for changes in scss files
// F-R
fs.watch(srcDir, (event, fileName) => {
  if (path.extname(fileName) !== '.scss' || fileName[0] == '_') return;

  console.log(`${event.toUpperCase()}: ${fileName}`);

  compileSass(fileName);
});

// Compile all scss files initially
// F-R
fs.readdir(srcDir, (err, files) => {
  if (err) throw err;

  files.forEach(file => {
    // Not need rendering when contains file that is not scss or static file like _filename.scss
    if (path.extname(file) !== '.scss' || file[0] == '_') return;
    compileSass(file);
  });
});